# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import service_pb2 as service__pb2


class VolumeStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Create1 = channel.unary_unary(
        '/smp.Volume/Create1',
        request_serializer=service__pb2.Request.SerializeToString,
        response_deserializer=service__pb2.Response.FromString,
        )
    self.Create2 = channel.stream_stream(
        '/smp.Volume/Create2',
        request_serializer=service__pb2.Request.SerializeToString,
        response_deserializer=service__pb2.Response.FromString,
        )
    self.Remove1 = channel.unary_unary(
        '/smp.Volume/Remove1',
        request_serializer=service__pb2.Request.SerializeToString,
        response_deserializer=service__pb2.Response.FromString,
        )
    self.List = channel.unary_stream(
        '/smp.Volume/List',
        request_serializer=service__pb2.Request.SerializeToString,
        response_deserializer=service__pb2.Response.FromString,
        )
    self.Exists = channel.stream_unary(
        '/smp.Volume/Exists',
        request_serializer=service__pb2.Request.SerializeToString,
        response_deserializer=service__pb2.Response.FromString,
        )


class VolumeServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Create1(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Create2(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Remove1(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def List(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Exists(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_VolumeServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Create1': grpc.unary_unary_rpc_method_handler(
          servicer.Create1,
          request_deserializer=service__pb2.Request.FromString,
          response_serializer=service__pb2.Response.SerializeToString,
      ),
      'Create2': grpc.stream_stream_rpc_method_handler(
          servicer.Create2,
          request_deserializer=service__pb2.Request.FromString,
          response_serializer=service__pb2.Response.SerializeToString,
      ),
      'Remove1': grpc.unary_unary_rpc_method_handler(
          servicer.Remove1,
          request_deserializer=service__pb2.Request.FromString,
          response_serializer=service__pb2.Response.SerializeToString,
      ),
      'List': grpc.unary_stream_rpc_method_handler(
          servicer.List,
          request_deserializer=service__pb2.Request.FromString,
          response_serializer=service__pb2.Response.SerializeToString,
      ),
      'Exists': grpc.stream_unary_rpc_method_handler(
          servicer.Exists,
          request_deserializer=service__pb2.Request.FromString,
          response_serializer=service__pb2.Response.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'smp.Volume', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
